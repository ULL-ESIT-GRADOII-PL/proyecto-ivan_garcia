<nav>
      <ul>
        <li> <a href="\"  title="Index">Index</a> </li>
        <li> <a href="\grammar"  title="Grammar">Grammar PEG</a> </li>
        <li> <a href="\test"  title="Test">Test PEG</a> </li>
        <li> <a href="https://campusvirtual.ull.es/1516/course/view.php?id=178"  title="PL">PL-UDV</a> </li>
        <li> <a href="https://github.com/alu0100693737/Proyecto-PL"  title="Repo">Repo</a> </li>
        <li> <a href="http://alu0100693737.github.io/"  title="Pag Personal">Pag Personal</a> </li>
        <li> <a href="http://en.wikipedia.org/wiki/Recursive_descent_parser#Example_parser"   title="Wikipedia">PL0</a> </li>
        <li> <a href="http://pegjs.majda.cz/"  title="PEG.js">PEG.js</a> </li>
        <li> <a href="http://datamapper.org/"  title="DataMapper">DataMapper</a> </li>
        <li> <a href="http://sass-lang.com/"  title="Sass">Sass</a> </li>
        <li> <a href="http://docs.mathjax.org/en/latest/start.html"  title="MathJax">MathJax</a> </li>
      </ul>
    </nav>
    <div id="footer"> Iván Garcia Campos.  &nbsp Procesadores de lenguaje </div>
<link href="../css/normalize.css" rel="stylesheet" type="text/css" id="prueba">
<link href="../css/global.css" rel="stylesheet" type="text/css" id="prueba">
<center><h1>Analizador de PL0 ampliado usando PEG.js</h1></center>
<div id="grammar">
  <br><br>
Recuerde que un PEG $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. <br> <br>
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de <br>
      <i>símbolos no terminales</i>,
      <i>variables sintácticas</i> o <i>categorías gramáticales</i>, <br> <br>
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir <br>
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \leftarrow \alpha$. <br>
  Un elemento de $P$ se denomina <i>regla de análisis</i>. <br> <br>
  <li>Por último, $S$ es un símbolo del conjunto <br>
  $V$ que se denomina <i>expresión de arranque</i>. <br>
</ol>
<ol>
  <li> $\Sigma = \{ if, then, else, =, +, -, *, /, (, ), 0 \ldots 9 \}$, <br> <br>
  <li> $V = \{ st, exp, term, factor \} \cup$ <br />
  $\{ASSIGN, ADD, MUL, LEFTPAR, RIGHTPAR \} \cup$ <br />
  $\{IF, THEN, ELSE, ID, NUMBER, \_ \}$ <br> <br>
  <li> Reglas de Análisis:
  <ol>
<pre>
st     = ID ASSIGN exp
       / IF exp THEN st ELSE st
       / IF exp THEN st
exp    = term   (ADD term)*
term   = factor (MUL factor)*

factor = NUMBER
       / ID
       / LEFTPAR exp RIGHTPAR

_ = $[ \t\n\r]*

ASSIGN   = _ '=' _
ADD      = _ [+-] _
MUL      = _ [*/] _
LEFTPAR  = _"("_
RIGHTPAR = _")"_
IF       = _ "if" _
THEN     = _ "then" _
ELSE     = _ "else" _
ID       = _ [a-zA-Z_][a-zA-Z_0-9]* _
NUMBER   = _ [0-9]+ _
</pre>
  </ol>
  <li> Expresión de arranque: $st$
</ol>
<BR>
</div>

